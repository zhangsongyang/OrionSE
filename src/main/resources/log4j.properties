### set log levels ###
#log4j.rootLogger = INFO, stdout, appender1
log4j.rootCategory=INFO, stdout
#log4j.rootLogger = INFO, appender1
log4j.rootLogger = debug, stdout

### 输出到控制台 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Threshold = debug
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.Encoding = UTF-8
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ] - [%c] - [%l] - %m%n

### 输出到指定文件(按照天) ###
log4j.appender.appender1 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.appender1.Threshold=INFO
#log4j.appender.appender1.File = ${catalina.home}/logs/plugin.log
log4j.appender.appender1.File = E:/apache-tomcat-6.0.44/logs/plugin.log
log4j.appender.appender1.Encoding = UTF-8
log4j.appender.appender1.Append = true
log4j.appender.appender1.layout = org.apache.log4j.PatternLayout
log4j.appender.appender1.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ] - [%c] - [%l] - %m%n

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %t %c{2}:%L - %m%n

#　　%m 输出代码中指定的消息
#　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#　　%r 输出自应用启动到输出该log信息耗费的毫秒数
#　　%c 输出所属的类目，通常就是所在类的全名
#　　%t 输出产生该日志事件的线程名
#　　%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#　　%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)

### 输出到指定文件(按照文件大小) ###
log4j.appender.appender2 = org.apache.log4j.RollingFileAppender
log4j.appender.appender2.Threshold=INFO
log4j.appender.appender2.File = ${catalina.home}/logs/plugin.log
#log4j.appender.appender2.File = D:/Program Files/apache-tomcat-6.0.41/logs/plugin.log
log4j.appender.appender2.MaxFileSize=1kB
log4j.appender.appender2.MaxBackupIndex=5
log4j.appender.appender2.Append = true
log4j.appender.appender2.layout = org.apache.log4j.PatternLayout
log4j.appender.appender2.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ] - [%c] - [%l] -%m%n


### hibernate 日志输出控制
log4j.logger.org.hibernate=info
#log4j.logger.org.hibernate=debug

### log HQL query parser activity
#log4j.logger.org.hibernate.hql.ast.AST=debug

### log just the SQL
#log4j.logger.org.hibernate.SQL=debug

### log JDBC bind parameters ###
log4j.logger.org.hibernate.type=info
#log4j.logger.org.hibernate.type=debug

### log schema export/update ###
log4j.logger.org.hibernate.tool.hbm2ddl=debug

### log HQL parse trees
#log4j.logger.org.hibernate.hql=debug

### log cache activity ###
#log4j.logger.org.hibernate.cache=debug

### log transaction activity
#log4j.logger.org.hibernate.transaction=debug

### log JDBC resource acquisition
#log4j.logger.org.hibernate.jdbc=debug

### enable the following line if you want to track down connection ###
### leakages when using DriverManagerConnectionProvider ###
#log4j.logger.org.hibernate.connection.DriverManagerConnectionProvider=trace